USER AUTHENTICATION
SEARCH BY TAG
TRIGGER FINALIZE






BACKEND
listener event js function
/writer/ personnel.ejs {if statements needed}
/genre/ genre.ejs {need to think about it}
/studio/
REVIEW PAGES will contain only not null descriptions


FRONTEND
css files
img jogar kora
buttons

ORGANIZATION
all routers
all Db codes like get all anime
process.env.ROOT


DATABASE
unique id generation 
    FOR REVIEW
    FOR ANIME
    FOR PERSONNEL
pictureid insertion


DON'T FORGET
module.exports and require
async await
proper links to the folders in app.js
update pageInfo object for all res.sends




FEATURES
post review, edit review, vote review, comment on review
add to list, remove from list (triggers the users recommendation)
Get recommendation
Popular anime's of the season
Newly released anime
Search by Genre, studio etc.



triggers

    INSERT TRIGGERS FOR THE
        [HANDLE IN BACKEND] REVIEWED RELATION : IF REVIEW ENTERED THEN REVIEWD WILL BE FILLED UP
        IF VOTED ON A REVIEW, THE VOTES ATTRIBUTE OF REVIW WILL INCREASE
        PERSONNEL TO WRITER(GENRE SPECIALIZATION) AND VOICE ACTORS(ROLE SPECIALIZATION)
        IF STARRED ON ANIME UPDATE THE RATING OF THE ANIME [ COULD BE DONE IN BACKEND AS WELL]
    if added to list, insert into preference/update counter +0.1
    if removed from list, delete from preference/update counter -0.1

    this could be for star/ review as well. counter increment = rating / 2 -1.5

    if starred on an anime, update anime rating field avg value of all ratings OF THAT ANIME.. star/5.. 
    avg doesnt count null values in oracle avg(com_pct) = sum/count(com_pct)..
    so we can fetch the rating of the episodes as well.
